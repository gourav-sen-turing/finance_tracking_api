c
n
c
n
Rails.application&.credentials&.secret_key_base
 Rails.application&.credentials
 Rails.application&.secrets
Rails.application
SECRET_KEY = Rails.application&.secrets&.secret_key_base || Rails.application&.credentials&.secret_key_base
c
n
c
n
c
auth_token = auth_service.call[:result]
params
auth_service = AuthenticateUser.new(auth_params[:email], auth_params[:password])
c
@decoded = JwtHandler.decode(token)
token
n
c
@decoded = JwtHandler.decode(token)
token
n
c
@decoded = JwtHandler.decode(token)
token
 @decoded = JwtHandler.decode(token)
token = header.split(' ').last
n
header.present?
n
header = request.headers['Authorization']
c
e
n
@decoded = JWT.decode(token, true, { algorithm: 'HS256' }).first
jwt_secret_key
token
@decoded = JWT.decode(token, jwt_secret_key, true, { algorithm: 'HS256' }).first
n
Rails.logger.info "Attempting to decode token: #{token[0...10]}..." if token
n
token = header.match(/^Bearer\s+(.*)$/i)&.captures&.first
n
request.headers['Authorization']
request.headers
c
headers
header
params
current_user
c
auth_token = AuthenticateUser.call(user.email, user.password).resul
n
c
x
n
c
User.create!(user_params)
user_params
